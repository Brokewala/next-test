generator client {
  provider = "prisma-client-js"
binaryTargets = ["native", "linux-musl", "debian-openssl-1.0.x"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Utilisateur {
  id         Int      @id @default(autoincrement())
  nom        String
  email      String   @unique
  motDePasse String
  adresse    String
  role       Role     @default(CLIENT)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  admin      Admin?
  client     Client?
}

model Client {
  id            Int         @id @default(autoincrement())
  utilisateurId Int         @unique
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])
  commandes     Commande[]
  panier        Panier?
}

model Admin {
  id            Int         @id @default(autoincrement())
  utilisateurId Int         @unique
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])
}

model Produit {
  id            Int            @id @default(autoincrement())
  nom           String
  description   String
  prix          Float
  stock         Int
  keyWord       String         @default("")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  categorieId   Int
  image         String[]
  itemCommandes ItemCommande[]
  itemPaniers   ItemPanier[]
  categorie     Categorie      @relation(fields: [categorieId], references: [id])

  @@index([categorieId])
}

model Categorie {
  id        Int       @id @default(autoincrement())
  nom       String    @unique
  // parentId  String?
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  produits  Produit[]
}

model Panier {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  clientId  Int          @unique
  items     ItemPanier[]
  client    Client       @relation(fields: [clientId], references: [id])
}

model ItemPanier {
  id        Int      @id @default(autoincrement())
  quantite  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  produitId Int      @unique
  panierId  String
  panier    Panier   @relation(fields: [panierId], references: [id])
  produit   Produit  @relation(fields: [produitId], references: [id])

  @@index([produitId])
  @@index([panierId])
}

model Commande {
  id        Int            @id @default(autoincrement())
  date      DateTime       @default(now())
  statut    StatutCommande @default(EN_ATTENTE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  clientId  Int
  client    Client         @relation(fields: [clientId], references: [id])
  items     ItemCommande[]

  @@index([clientId])
}

model ItemCommande {
  id           Int      @id @default(autoincrement())
  quantite     Int
  prixUnitaire Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  produitId    Int
  commandeId   Int
  commande     Commande @relation(fields: [commandeId], references: [id])
  produit      Produit  @relation(fields: [produitId], references: [id])

  @@index([produitId])
  @@index([commandeId])
}

enum Role {
  CLIENT
  ADMIN
}

enum StatutCommande {
  EN_ATTENTE
  EN_PREPARATION
  EXPEDIE
  LIVRE
  ANNULE
}
